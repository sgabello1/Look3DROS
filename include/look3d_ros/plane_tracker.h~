// Copyright 2012, 2013, 2014 The Look3D Authors. All rights reserved.
#pragma once
#include <vector>
#include <opencv2/core/core.hpp>
#include "look3d_track_api.h"

namespace look3d {
class PlaneTrackerImpl;

class LOOK3D_TRACK_API PlaneTracker {
 public:
  enum TrackResult {INIT = 0, GOOD, OK, BAD, FAILURE, NEW_KEYFRAME, RELOCALIZED};

  static std::string TrackResultToStr(TrackResult res) {
    switch (res) {
      case INIT:
        return std::string("INIT");
      case GOOD:
        return std::string("GOOD");
      case OK:
        return std::string("OK");
      case BAD:
        return std::string("BAD");
      case FAILURE:
        return std::string("FAILURE");
      case NEW_KEYFRAME:
        return std::string("NEW_KEYFRAME");
      case RELOCALIZED:
        return std::string("RELOCALIZED");
    }
  }

  PlaneTracker();

  ~PlaneTracker();

  /// Configuration for initializing the tracker
  /// @config_fn is configuration (*.ini) file name
  bool Configure(std::string config_fn);

  /// Restart the tracker 
  void RestartTracker();

  /// @gray_img is grayscale image for tracking
  TrackResult Track(const cv::Mat& gray_img);

  /// Currently tracked position of the camera w.r.t to the first keyframe
  /// @return transformation from world coordinates to camera coordinates
  /// Row-major order 4x4 matrix
  std::vector<double> GetCurrentPose();

  /// Camera params: fx, fy, cx, cy, d1, d2
  /// fx, fy: focal lengths
  /// cx, cy: principal point coordinates
  /// d1, d2: radial distortion coefficients
  std::vector<double> GetCameraParams();

  /// Camera resolution used (e.x.: 640x480)
  cv::Size GetCameraResolution();


 private:
  PlaneTrackerImpl* tracker_;
};
}  // namespace look3d
